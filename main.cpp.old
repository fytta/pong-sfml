#include <SFML/Graphics.hpp>
#include <iostream>
#include <thread>
#include "Player.h"
#include "Ball.h"
#include "UIManager.h"

// game manager TODO: Hacer objeto GameManager
float ballPosX = 0.1f;
float ballPosY = 0.1f;
sf::FloatRect board(0, 0, 800, 600);
unsigned int score1 = 0;
unsigned int score2 = 0;

void ballCollision(sf::FloatRect ball, sf::FloatRect player1, sf::FloatRect player2);
void closeWindowHandler(sf::RenderWindow& window, sf::Event& event);
void onScoreChange(UIManager& ui);

int main()
{
    sf::RenderWindow window(sf::VideoMode(board.width, board.height), "SFML works!");

    sf::Vector2f posPlayer1(0, 100);
    sf::Vector2f posPlayer2(780, 100);
    UIManager ui;
    Player player(sf::Color::Green, posPlayer1);
    Player player2(sf::Color::White, posPlayer2);
    Ball ball;

    std::thread scoreThread(onScoreChange, std::ref(ui));

    sf::Event event;
    while (window.isOpen())
    {
        closeWindowHandler(window, event);

        // player1 movement
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::W))
        {
            player.move(-0.05);
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::S))
        {
            player.move(0.05);
        }

        // player2 movement
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up))
        {
            player2.move(-0.05);
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down))
        {
            player2.move(0.05);
        }


        window.clear();
        window.draw(ui.scoreTxt);
        window.draw(player.ping);
        window.draw(player2.ping);
        window.draw(ball.ball);

        // Actualizar la posición de la bola
        ballCollision(ball.ball.getGlobalBounds(), player.ping.getGlobalBounds(), player2.ping.getGlobalBounds());
        ball.move(ballPosX, ballPosY);



        window.display();
    }

	scoreThread.join();

    return 0;
}


void ballCollision(sf::FloatRect ball, sf::FloatRect player1, sf::FloatRect player2)
{
    if (ball.intersects(player1))
    {
        // manage lateral collision
        if (ball.left + ball.width <= player1.left || ball.left >= player1.left + player1.width) {
            ballPosX = -ballPosX; 
        }
        else {
            ballPosX = -ballPosX; 
            score1++;
        }
    }
    else if (ball.intersects(player2))
    {
        // manage lateral collision
        if (ball.left + ball.width <= player1.left || ball.left >= player1.left + player1.width) {
            ballPosX = -ballPosX;
        }
        else {
            ballPosX = -ballPosX;
            score2++;
        }
    }
    else if (ball.left <= board.left || ball.left + ball.width >= board.left + board.width) 
    {
        ballPosX = -ballPosX;
    }
    else if (ball.top <= board.top || ball.top + ball.height >= board.top + board.height) 
    {
        ballPosY = -ballPosY;
    }
}

void closeWindowHandler(sf::RenderWindow& window, sf::Event& event)
{
    while (window.pollEvent(event))
    {
        if (event.type == sf::Event::Closed || sf::Keyboard::isKeyPressed(sf::Keyboard::Escape))
        {
            window.close();
        }
    }
}

void onScoreChange(UIManager& ui) {
    int prevScore1 = score1;
    int prevScore2 = score2;
    while (true) {
        if (score1 != prevScore1 || score2 != prevScore2) {
            ui.setScore(score1, score2);
            prevScore1 = score1;
            prevScore2 = score2;
        }
        std::this_thread::sleep_for(std::chrono::milliseconds(100)); // Espera un tiempo para verificar de nuevo
    }
}